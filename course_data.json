{
  "course_name": "Write Professional Command-line Programs in Go - Learn Interactively",
  "course_overview": "In this course you will learn why Go is an awesome language for writing command-line programs. You will learn how to structure your Go programs, how to write idiomatic Go code, how to test your programs and how to amaze your users, peers and managers. \n\nThe focus is on command-line programs in order to keep the course down to earth, but most of the principles and best practices you will learn apply to any Go program.",
  "course_folder": "write professional command line programs in go",
  "course_lessons": [
    "0-what s a command line program",
    "1-why go",
    "2-lightning quick introduction to go",
    "4-introducing multi git 0 1",
    "5-analyzing multi git 0 1",
    "6-improving multi git",
    "7-the foundations of a go program",
    "8-creating the directory structure",
    "9-refactoring the core logic",
    "10-adding a helpers package",
    "11-refactoring the command line interface",
    "12-introducing the built in go testing support",
    "13-running go tests",
    "14-checking test coverage",
    "15-quick introduction to ginkgo and gomega",
    "16-writing bdd tests for multi git",
    "17-running unit tests for multi git",
    "18-preparing for end to end tests",
    "19-building the foundation for end to end tests",
    "20-writing end to end tests",
    "21-running end to end tests",
    "22-debugging with tests",
    "23-introduction to cobra",
    "24-comparing cobra to alternatives",
    "25-working with cobra the root command",
    "26-working with cobra the sub commands",
    "27-working with cobra flags",
    "28-understanding the cobra generator",
    "29-creating an application skeleton with the cobra generator",
    "30-adding commands with the cobra generator",
    "31-building the application on top of the skeleton",
    "32-finalizing the cobra generated application",
    "33-refactoring multi git to use cobra the plan",
    "34-refactoring multi git to use cobra the root command",
    "35-finalizing the integration of cobra into multi git",
    "36-understanding program configuration",
    "37-taking advantage of sophisticated configuration",
    "38-introduction to viper",
    "39-viper and environment variables",
    "40-locating configuration files",
    "41-reading and writing configuration files",
    "42-watching configuration files",
    "43-understanding remote configuration",
    "44-dynamic remote configuration with viper",
    "45-understanding the synergy between cobra and viper",
    "46-integrating cobra and viper",
    "47-refactoring multi git to use viper",
    "48-adding a configuration file to multi git",
    "49-understanding the go build process",
    "50-building go packages",
    "51-linking go programs",
    "52-embedding data into go programs",
    "53-introduction to self updating programs and github actions",
    "54-making a ci cd pipeline for multi git",
    "55-creating github releases for multi git",
    "56-transforming multi git to a self updateable program",
    "57-introduction to containers and docker",
    "58-using a multi stage dockerfile",
    "59-dockerizing multi git",
    "60-introduction to makefiles",
    "61-adding a makefile for multi git",
    "62-course recap"
  ],
  "repo_name": "harmful-daughter"
}
